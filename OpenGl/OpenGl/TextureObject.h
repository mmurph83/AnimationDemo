#pragma once
#include "GL\glcorearb.h"
#include "Texture.h"
class TextureObject
{
public:
	TextureObject(Texture::Name name);
	TextureObject();
	enum TargetTexture
	{
		TEXTURE_1D = GL_TEXTURE_1D,
		TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
		TEXTURE_2D = GL_TEXTURE_1D_ARRAY,
		TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
		TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE,
		TEXTURE_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY,
		TEXTURE_3D = GL_TEXTURE_3D,
		TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP,
		TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
		TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE
	};
	enum Name
	{
		DEPTH_STENCIL_TEXTURE_MODE = GL_DEPTH_STENCIL_TEXTURE_MODE,
		TEXTURE_BASE_LEVEL = GL_TEXTURE_BASE_LEVEL,
		TEXTURE_COMPARE_FUNC = GL_TEXTURE_COMPARE_FUNC,
		TEXTURE_COMPARE_MODE = GL_TEXTURE_COMPARE_MODE,
		TEXTURE_LOD_BIAS = GL_TEXTURE_LOD_BIAS,
		TEXTURE_MIN_FILTER = GL_TEXTURE_MIN_FILTER,
		TEXTURE_MAG_FILTER = GL_TEXTURE_MAG_FILTER,
		TEXTURE_MIN_LOD = GL_TEXTURE_MIN_LOD,
		TEXTURE_MAX_LOD = GL_TEXTURE_MAX_LOD,
		TEXTURE_MAX_LEVEL = GL_TEXTURE_MAX_LEVEL,
		TEXTURE_SWIZZLE_R = GL_TEXTURE_SWIZZLE_R,
		TEXTURE_SWIZZLE_G = GL_TEXTURE_SWIZZLE_G,
		TEXTURE_SWIZZLE_B = GL_TEXTURE_SWIZZLE_B,
		TEXTURE_SWIZZLE_A = GL_TEXTURE_SWIZZLE_A,
		TEXTURE_WRAP_S = GL_TEXTURE_WRAP_S, 
		TEXTURE_WRAP_T = GL_TEXTURE_WRAP_T, 
		TEXTURE_WRAP_R = GL_TEXTURE_WRAP_R
	};
	/*enum Parameter
	{
		Nearest = GL_NEAREST,
		Linear = GL_LINEAR,
		NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST,
		LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST,
		NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,
		CLAMP_TO_EDGE = GL_CLAMP_TO_EDGE,
		CLAMP_TO_BORDER = GL_CLAMP_TO_BORDER, 
		MIRRORED_REPEAT = GL_MIRRORED_REPEAT,
		REPEAT = GL_REPEAT,
		MIRROR_CLAMP_TO_EDGE = GL_MIRROR_CLAMP_TO_EDGE

	};*/
	enum Min_Filter_Parameter
	{
		Nearest_Min = GL_NEAREST,
		Linear_Min = GL_LINEAR,
		NEAREST_MIPMAP_NEAREST_Min = GL_NEAREST_MIPMAP_NEAREST,
		LINEAR_MIPMAP_NEAREST_Min = GL_LINEAR_MIPMAP_NEAREST,
		NEAREST_MIPMAP_LINEAR_Min = GL_NEAREST_MIPMAP_LINEAR,
		LINEAR_MIPMAP_LINEAR_Min = GL_LINEAR_MIPMAP_LINEAR,
	};
	enum Texture_Wrap
	{
		CLAMP_TO_EDGE = GL_CLAMP_TO_EDGE,
		CLAMP_TO_BORDER = GL_CLAMP_TO_BORDER,
		MIRRORED_REPEAT = GL_MIRRORED_REPEAT,
		REPEAT = GL_REPEAT,
		MIRROR_CLAMP_TO_EDGE = GL_MIRROR_CLAMP_TO_EDGE
	};
	enum Mag_Filter_Parameter
	{
		Nearest_Mag = GL_NEAREST,
		Linear_Mag = GL_LINEAR,
	};
	
	~TextureObject();
	void SendTexture();
	void SetTexture(Texture::Name name);
	void SetMinFilter(Min_Filter_Parameter filter);
	void SetMagFilter(Mag_Filter_Parameter filter);
	void SetTextureWrapeS(Texture_Wrap wrap);
	void SetTextureWrapeT(Texture_Wrap wrap);
private:
	TextureObject(const TextureObject&) = delete;
	Min_Filter_Parameter minParameter;
	Mag_Filter_Parameter magParameter;
	Texture_Wrap textureWrapS;
	Texture_Wrap textureWrapT;
	Texture::Name textureName;
};

